Have the function KaprekarsConstant(num) take the num parameter being passed which will be a 4-digit number with at least two distinct digits. Your program should perform the following routine on the number: Arrange the digits in descending order and in ascending order (adding zeroes to fit it to a 4-digit number), and subtract the smaller number from the bigger number. Then repeat the previous step. Performing this routine will always cause you to reach a fixed number: 6174

Then performing the routine on 6174 will always give you 6174 (7641 - 1467 = 6174). Your program should return the number of times this routine must be performed until 6174 is reached. For example: if num is 3524 your program should return 3 because of the following steps: (1) 5432 - 2345 = 3087, (2) 8730 - 0378 = 8352, (3) 8532 - 2358 = 6174



Ruby Solution.

def test(num)
i = 0
#if num!= 6174
#num_new= num
# for (0..num_new) do
# 	num_new = (if num==6174)? num_new= num : num_new
	while(num != 6174)
		num_a = num.to_s.split('').sort
		num_d = num_a.reverse
	 	num =  num_d.join('').to_i - num_a.join('').to_i
	 	num = num.to_s.size < 4 ?  ((num.to_s.size == 2) ? "00#{num}": "0#{num}" ) : num
		i= i+1
	end

# end 
#end

print("number of iterations required are #{i }")
end

test(1000)
